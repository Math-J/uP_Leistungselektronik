TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:   1
start_master

 LOC CODE        LINE   SOURCELINE

                     1   #line 1 "start_master.asm"
                     1   ;;
                     2   ;; C166/ST10 startup code generated by EDE for project project_gerlach_linhsen_matthaei
                     3   ;;
                     4   ;; If modifications are needed, disable generation of the startup code in EDE:
                     5   ;; In the EDE Project Options dialog select Application, and then Startup. Make
                     6   ;; sure the checkbox 'Generate system startup code and add it to project' is not
                     7   ;; checked. Note that changes in EDE will now no longer be reflected in the
                     8   ;; startup code. Also be aware that the modifications will be overwritten when
                     9   ;; the checkbox is enabled again.
                    10   ;;
                    11   
                    12   $EXTEND2
                    13   $CASE
                    14   $GENONLY
                    15   $NOLOCALS
                    16   $CHECKCPU16
                    17   $CHECKBUS18
                    18   $NOMOD166                               ; disable the internal set of SFRs
                    19   $STDNAMES(regxe167f.def)                ; define SFRs
                    20   
                    21                           ; disable(0)/enable(1) initialization of bit
                    22                                           ; variables at startup
                    23   $INCLUDE(head.asm)                      ; Generic definitions (see product include dir)
                    24   #line 1 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                     1   ;@" @(#)head.asm        1.43 02/10/15
                     2   ;***************************************************************************** 
                     3   ;*
                     4   ;* MODULE       : head.asm
                     5   ;*
                     6   ;* APPLICATION  : Run time library / Floating point library 80166
                     7   ;*
                     8   ;* DESCRIPTION  : This floating point header file is included at the begin
                     9   ;*                of each floating point source module. And it contains
                    10   ;*                several settings and declarations, which are:
                    11   ;*                - Memory mode selection, to translate the floating 
                    12   ;*                  point library for segmented or non-segmented memory mode. 
                    13   ;*                - Floating point error trap selection, to translate
                    14   ;*                  floating point library as fast or as accurate. 
                    15   ;*                - Declaration of floating point accumulators is done by the
                    16   ;*                  linker/locator.
                    17   ;*                - Floating point register bank definition.
                    18   ;*                - Declaration of floating constants.
                    19   ;*
                    20   ;* ANNALIST     : Guus Jansman
                    21   ;*
                    22   ;* Copyright 1992-2007 Altium BV
                    23   ;*
                    24   ;***************************************************************************** 
                    25   
                    26   #line 31 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                    31   
                    32   ; _EXT = 0, extended instruction set disabled
                    33   ; _EXT = 1, extended instruction set support enabled
                    34   #line 36 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:   2
start_master

 LOC CODE        LINE   SOURCELINE

                    36   
                    37   
                    38   ; _EXTMAC = 0, MAC instruction support disabled
                    39   ; _EXTMAC = 1, MAC instruction support enabled
                    40   #line 42 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                    42   
                    43   
                    44   ; _EXT2  = 0, C166Sv2.0/Super10 support disabled
                    45   ; _EXT2 != 1, C166Sv2.0/Super10 support enabled, this implies _EXT
                    46   
                    47           
                    48   
                    49   
                    50   ; _EXTMAC  = 0, MAC support disabled
                    51   ; _EXTMAC != 0, MAC support enabled, this implies _EXT
                    52   
                    53           
                    54   
                    55           
                    56   ; _USRSTACK = 0, user stack model disabled
                    57   ; _USRSTACK = 1, user stack model enabled
                    58   #line 60 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                    60   
                    61   
                    62   ; Set default memory model
                    63   #line 65 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                    65   
                    66   
                    67   ; _SINGLE_FP = 0, doubles are double precision
                    68   ; _SINGLE_FP = 1, doubles are single precision (non-ANSI)
                    69   #line 71 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                    71   
                    72   
                    73   ; FPCHKSPC = 0, invalid floating point results are undefined (non-ANSI)
                    74   ; FPCHKSPC = 1, invalid floating point results give proper values
                    75   
                    76           
                    77   
                    78   
                    79   ; FP_TRAP = 0, floating point error trap handling disabled
                    80   ; FP_TRAP = 1, floating point error trap handling enabled (only if FPCHKSPC)
                    81   
                    82           
                    83   
                    84   
                    85   ; FCMPTRAP = 0, floating point comparison will never cause a trap
                    86   ; FCMPTRAP = 1, floating point comparison can cause trap (only if FP_TRAP)
                    87   
                    88           
                    89   
                    90   
                    91   ; FPEXC_OP = 0, don't return floating point exception operation type
                    92   ; FPEXC_OP = 1, return floating point exception operation type (only if FP_TRAP)
                    93   
                    94           
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:   3
start_master

 LOC CODE        LINE   SOURCELINE

                    95   
                    96   
                    97   ; _P166 = 0, don't protect multiplication/division (can be overruled by e.g. FIXMUL28)
                    98   ; _P166 = 1, protect multiplication/division
                    99   
                   100           
                   101   
                   102   
                   103   ; FIXMUL28 = 0, don't protect multiplication (can be overruled by e.g. _P166)
                   104   ; FIXMUL28 = 1, protect multiplication
                   105   
                   106           
                   107   
                   108   
                   109   ; FIXDIV18 = 0, don't protect division (can be overruled by e.g. _P166)
                   110   ; FIXDIV18 = 1, protect division
                   111   
                   112           
                   113   
                   114   
                   115   ; FIXCPU21 = 0, don't fix BFLDH/BFLDL problem CPU.21
                   116   ; FIXCPU21 = 1, fix BFLDH/BFLDL problem CPU.21
                   117   
                   118           
                   119   
                   120   
                   121   ; FIX_BFWD = 0, no fix for 166 problem S1
                   122   ; FIX_BFWD = 1, fix 166 problem S1
                   123   
                   124           
                   125   
                   126   
                   127   ; FIX_CPU1R006 = 0, no fix for 163 problem 01.006
                   128   ; FIX_CPU1R006 = 1, fix problem 01.006
                   129   
                   130           
                   131   
                   132   
                   133   ; FIX_STBUS1 = 0, no fix for ST problem ST_BUS1
                   134   ; FIX_STBUS1 = 1, fix problem ST_BUS1
                   135   
                   136           
                   137   
                   138   
                   139   ; FIX_EXTSEQ = 0, no fix for problem CR107092
                   140   ; FIX_EXTSEQ = 1, fix problem CR107092
                   141   
                   142           
                   143   
                   144   
                   145   ; FIX_LONDON1 = 0, don't fix London1&London1751
                   146   ; FIX_LONDON1 = 1, fix London1&London1751 (overrules _P166/FIXDIV18)
                   147   
                   148           
                   149   
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:   4
start_master

 LOC CODE        LINE   SOURCELINE

                   150   
                   151   ; FPEXCEPT = OLD, old floating point exception method
                   152   ; FPEXCEPT = IEEE, IEEE floating point exception method
                   153   
                   154           
                   155   
                   156   
                   157   ; FIX_JMPRACACHE = 0, no fix for Egold problem CR108400:
                   158   ;                Program flow after not taken JMPR/JMPA can be broken
                   159   ; FIX_JMPRACACHE = 1, fix problem CR108400
                   160   
                   161           
                   162   
                   163   
                   164   ; FIX_EXT1DIV = 0, no fix for Egold problem CR105893:
                   165   ;               Interrupted division corrupted by division in ISR
                   166   ; FIX_EXT1DIV = 1, fix problem CR 105893
                   167   
                   168           
                   169   
                   170   
                   171   ; FIX_EXT1MDL = 0, no fix for Egold proble CR108309:
                   172   ;               MDL access immediately after a DIV causes wrong PSW values
                   173   ; FIX_EXT1MDL = 1, fix problem CR 108309
                   174   
                   175           
                   176   
                   177   
                   178   ; FIX_EXT1MDLMULDIV = 0, no fix for Egold proble CR108904:
                   179   ;               DIV/MUL interrupted by PEC causes invalid read/write
                   180   ; FIX_EXT1MDLMULDIV = 1, fix problem CR 108904
                   181   
                   182           
                   183   
                   184   
                   185           
                   186   #line 191 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   191   
                   192           $EXTEND                 ; enable all architecture extensions
                   193   
                   194   
                   195           $EXTMAC                 ; enable MAC architecture extensions
                   196   
                   197   
                   198           $EXTEND2                ; enable C166Sv2.0/Super10 architecture extensions
                   199   
                   200   
                   201           $MODEL( SMALL)
                   202           $NONSEGMENTED
                   203   #line 207 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   207   
                   208   
                   209   #line 241 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   241   
                   242   
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:   5
start_master

 LOC CODE        LINE   SOURCELINE

                   243   #line 248 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   248   fbias           EQU     127             ; EXCESS-127 float bias
                   249   dbias           EQU     1023            ; EXCESS-1023 double bias
                   250   f_dbias         EQU     fbias - dbias   ; bias adjustment for double to single
                   251                                           ; conversion.
                   252   d_fbias         EQU     dbias - fbias   ; bias adjustment for single to double 
                   253                                           ; conversion.
                   254   fprecb          EQU     24              ; # of significant bits (single)
                   255   dprecb          EQU     53              ; # of significant bits (double)
                   256   ffuzz           EQU     24              ;
                   257   dfuzz           EQU     55              ;
                   258   
                   259   facint_2        LIT     'R5'            ; Integer accumulator MSW (long).
                   260   facint_0        LIT     'R4'            ; Integer accumulator LSW.
                   261   facint          LIT     'R4'            ; Integer accumulator (int).
                   262   fptrap          LIT     'R1'            ; Floating trap code accumulator.
                   263   fpexcop         LIT     'R3'            ; Floating exception operation accu
                   264   FOS1_MAN0       LIT     'R4'            ; Float operand 1 mantissa MSB's
                   265   FOS1_MAN0H      LIT     'RH4'           ;
                   266   FOS1_MAN0L      LIT     'RL4'           ;
                   267   FOS1_MAN2       LIT     'R5'            ; Float operand 1 mantissa LSB's
                   268   FOS1_MAN2H      LIT     'RH5'           ;
                   269   FOS1_MAN2L      LIT     'RL5'           ;
                   270   FOS1_MAN4       LIT     'R3'            ; Float operand 1 mantissa round (RH3)
                   271   FOS1_MAN4H      LIT     'RH3'           ;
                   272   FOS1_MAN4L      LIT     'RL3'           ;
                   273   FOS1_EXP        LIT     'R1'            ; Float operand 1 exponent
                   274   FOS1_EXPH       LIT     'RH1'           ;
                   275   FOS1_EXPL       LIT     'RL1'           ;
                   276   FOS1_SGN        LIT     'R3'            ; Float operand 1 sign (R3.0)
                   277   FOS1_SGNH       LIT     'RH3'           ;
                   278   FOS1_SGNL       LIT     'RL3'           ;
                   279   FOS2_MAN0       LIT     'R10'           ; Float operand 2 mantissa MSB's
                   280   FOS2_MAN2       LIT     'R11'           ; Float operand 2 mantissa LSB's
                   281   FOS2_EXP        LIT     'R2'            ; Float operand 2 exponent
                   282   FOS2_EXPH       LIT     'RH2'           ;
                   283   FOS2_EXPL       LIT     'RL2'           ;
                   284   #line 288 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   288   
                   289   FOS2_EXPT       LIT     'R2'            ; Float operand 1 temporary exponent
                   290   FOS2_EXPTH      LIT     'RH2'           ;
                   291   FOS2_EXPTL      LIT     'RL2'           ;
                   292   
                   293   FOS2_SGN        LIT     'R3'            ; Float operand 2 sign (R3.1)
                   294   FOS2_SGNH       LIT     'RH3'           ;
                   295   FOS2_SGNL       LIT     'RL3'           ;
                   296   FOD1_MAN0       LIT     'R7'            ; Double operand 1 mantissa
                   297   FOD1_MAN0H      LIT     'RH7'           ;
                   298   FOD1_MAN0L      LIT     'RL7'           ;
                   299   FOD1_MAN2       LIT     'R8'            ;
                   300   FOD1_MAN4       LIT     'R9'            ;
                   301   FOD1_MAN6       LIT     'R5'            ;
                   302   FOD1_MAN8       LIT     'R3'            ; Double operand 1 mantissa round (RH3)
                   303   FOD1_MAN8H      LIT     'RH3'           ;
                   304   FOD1_MAN8L      LIT     'RL3'           ;
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:   6
start_master

 LOC CODE        LINE   SOURCELINE

                   305   FOD1_EXP        LIT     'R1'            ; Double operand 1 exponent
                   306   FOD1_EXPH       LIT     'RH1'           ;
                   307   FOD1_EXPL       LIT     'RL1'           ;
                   308   FOD1_SGN        LIT     'R4'            ; Double operand 1 sign (R4.0)
                   309   FOD2_MAN0       LIT     'R6'            ; Double operand 2 mantissa
                   310   FOD2_MAN0H      LIT     'RH6'           ;
                   311   FOD2_MAN0L      LIT     'RL6'           ;
                   312   FOD2_MAN2       LIT     'R12'           ;
                   313   FOD2_MAN4       LIT     'R13'           ;
                   314   FOD2_MAN6       LIT     'R14'           ;
                   315   FOD2_EXP        LIT     'R2'            ; Double operand 2 exponent
                   316   FOD2_EXPH       LIT     'RH2'           ;
                   317   FOD2_EXPL       LIT     'RL2'           ;
                   318   #line 320 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   320   
                   321   FOD2_EXPT       LIT     'R2'            ; Double operand 2 temporary exponent
                   322   
                   323   FOD2_SGN        LIT     'R4'            ; Double operand 2 sign (R4.1)
                   324   
                   325   #line 330 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   330   ; Watchdog timer support
                   331   ;
                   332   ; The macro SERVWDT will service the watchdog timer if support has
                   333   ; been enabled
                   334   #line 338 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   338   
                   339   #line 340 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   340           
                   341   
                   342   
                   343   #line 346 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   346   
                   347   
                   348   ; _BFWDNOP() can be used to solve 166 problem S1
                   349   ; Erroneous Byte Forwarding for Internal RAM locations (only needed for old uC's).
                   350   ; Place 0, 1 or 2 _BFWD_NOP's after byte write instructions.
                   351   #line 355 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   355   
                   356   #line 357 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   357   
                   358   
                   359   
                   360   ; FIX_MULDIV = IEN, multiplication/division protected by "BCLR IEN"
                   361   ; FIX_MULDIV = ILVL, multiplication/division protected by "OR PSW, #0F000h"
                   362   ; FIX_MULDIV does not seem to be used!
                   363   
                   364           
                   365   
                   366   
                   367   ; _CPU1R006() can be used to solve 163-24D problem CPU 01.006
                   368   ; (CPU hangs with execution mov Rn, [Rm+#data16]).
                   369   ; Replace "MOV Rd, [Ri+#data16]" with "_CPU1R006( Rd, Ri, data16 )".
                   370   #line 376 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   376   
                   377   #line 379 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:   7
start_master

 LOC CODE        LINE   SOURCELINE

                   379   
                   380   
                   381   
                   382   ; _STBUS1() can be used to solve ST10 problem ST_BUS1
                   383   ; (PEC transfers and JMPS).
                   384   ; Replace "JMPS SEG func, SOF func" with "_STBUS1( func )".
                   385   ; Of course this macro only influences segmented memory models.
                   386   #line 394 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   394   
                   395   #line 397 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   397   
                   398   
                   399   
                   400   ; The macro _LONDON1 expands to an ATOMIC #2 instruction when FIX_LONDON1 is set.
                   401   ; otherwise _LONDON1 expands to an empty macro. This fix only applies to extended
                   402   ; architectures.
                   403   #line 407 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   407   
                   408   #line 409 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   409   
                   410   
                   411   
                   412   ; the macro FIX_JMPRACACHE can be used to solve Egold problem CR108400
                   413   ; (Program flow after not taken JMPR/JMPA can be broken).
                   414   ; After each unconditional JMPR or JMPA, insert an unconditional JMPR
                   415   ; to the instruction following it.
                   416   #line 420 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   420   
                   421   #line 422 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   422   
                   423    
                   424   
                   425   ; In the floating point code is the instruction "mulu Rx, Ry" replaced by the
                   426   ; macro MUI( Rx, Ry ).
                   427   ; Depending of the flags this can bypass many CPU errors, like:
                   428   ; problem7      Incorrect multiply or divide results during hold states
                   429   ; problem17     Interrupted multiplication in combination with higher priority
                   430   ;               interrupt after RETI
                   431   ; problem28     See CPU.11
                   432   ; CPU.2         MUL/DIV last instruction in ATOMIC or EXTEND sequence
                   433   ; CPU.11        Stack underflow trap during restart of interrupted multiply
                   434   ; CPU.18        Interrupted multiply/divide instructions in internal Flash
                   435   #line 477 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   477   
                   478   
                   479   ; In the floating point code is the instruction "divlu Rx" replaced by the
                   480   ; macro DIL( Rx, PREMDLHACCESS, POSTMDLACCESS ).
                   481   ; Depending of the flags this can bypass many CPU errors, like:
                   482   ; problem7      Incorrect multiply or divide results during hold states
                   483   ; CPU.2         MUL/DIV last instruction in ATOMIC or EXTEND sequence
                   484   ; CPU.18        Interrupted multiply/divide instructions in internal Flash
                   485   ; LONDON1751    DIV result in MDH/MDL can be distorted by explicit CSFR write
                   486   ; Remember there's a nasty CPU error (CPU.17/problem30) making the overflow
                   487   ; flag suspicious.
                   488   #line 549 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:   8
start_master

 LOC CODE        LINE   SOURCELINE

                   549   
                   550   
                   551   ; In the floating point code is the instruction "divX Rx" replaced by the
                   552   ; macro DIV( INSTRUCTION, Rx, PREMDLHACCESS, POSTMDLACCESS ).
                   553   ; Depending of the flags this can bypass CPU errors, like:
                   554   ; CR105893      FIX_EXT1DIV     div corrupted if interrupted by div
                   555   ; CR108309      FIX_EXT1MDLDIV  mdl access corrupts if after div
                   556   ; CR108904      FIX_EXT1MDLHMULDIV PEC interrupt corrupts if div after MDL/H access
                   557   #line 598 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   598   
                   599   
                   600   ; Macro _CALL() creates the right code for a direct/indirect function call
                   601   ; Macro _RET() creates the right code for function return.
                   602   ; These macro's are added to support _USRSTACK function call and return.
                   603   ; _USRSTACK code is generated if variable _USRSTACK is set, else a normal
                   604   ; function call and return (CALL/RET) will be generated.
                   605   ; Rx is a temporary register. R10 or R11 could be used for Rx without saving
                   606   ; and restoring the contents in it for the most cases. (R10 now best choice.)
                   607   ; Register R2 is used in the return stub function and in the return macro
                   608   ; for tiny and medium model, so operands may not be passed via register R2 !
                   609   
                   610   #line 615 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   615   
                   616   #line 620 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   620   
                   621   #line 623 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   623   
                   624   #line 725 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   725   
                   726   
                   727   ; Unpack one single precision floating point operand
                   728   #line 730 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   730   
                   731   
                   732   ; 
                   733   ; Unpack two single precision floating point operands
                   734   #line 743 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   743   
                   744   
                   745   ; Unpack one double precision floating point operand
                   746   #line 748 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   748   
                   749   
                   750   ; Unpack two double precision floating point operands
                   751   #line 760 "c:\program files (x86)\tasking\c166 v8.7r1\include\head.asm"
                   760   
                   761   #line 24 "start_master.asm"
                    24   $INCLUDE(_c_init.asm)                   ; Initialize C variables
                    25   #line 1 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                     1   ;*****************************************************************************
                     2   ;*
                     3   ;* MODULE       : _c_init.asm
                     4   ;*
                     5   ;* DESCRIPTION  : C copy table code for C16x/ST10 microcontroller.
                     6   ;*
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:   9
start_master

 LOC CODE        LINE   SOURCELINE

                     7   ;*              - Initialization of static variables in internal or external
                     8   ;*                ram. C variables which have to be initialized are specified
                     9   ;*                in ROM section C166_INIT. C variables which must
                    10   ;*                be cleared are specified in ROM section C166_BSS.
                    11   ;*              - Set user stack pointer.
                    12   ;*
                    13   ;* Copyright 1997-2007 Altium BV
                    14   ;*
                    15   ;*****************************************************************************
                    16   
                    17   #line 19 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                    19   
                    20   
                    21   PUBLIC __C_INIT
                    22                                                   
                    23           ; Predefined functions for register R1, R2 and R3.
                    24           POF_RAM         LIT     'R1'    ; Page offset address ram data.
                    25           SOF_RAM         LIT     'R1'    ; Segment offset address ram data.
                    26           SOF_RAM_H       LIT     'RH1'   ; Segment address high byte.
                    27           POF_ROM         LIT     'R2'    ; Page offset address rom data.
                    28           SOF_ROM         LIT     'R2'    ; Segment offset address rom data.
                    29           SOF_ROM_H       LIT     'RH2'   ; Segment address high byte.
                    30           BP_RAM          LIT     'R3'    ; Bit position ram data
                    31   
                    32   ;*****************************************************************************
                    33   ;* __C_INIT
                    34   ;*****************************************************************************
                    35   __C_INIT_PR     SECTION CODE PUBLIC 'C_INIT'
                    36   
                    37   #line 39 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                    39   
                    40   __C_INIT        PROC FAR
                    41                   
                    42   #line 44 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                    44   
                    45           BOTTOM_BITRAM   LIT  '0FD00H'
                    46   
                    47   
                    48   #line 50 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                    50   
                    51   
                    52   
                    53                                           ; Clear bit addressable memory
0000 E6F1FEFD       54           MOV     R1, #0FDFEH             ; R1 = top of bit addressable area
0004 46F10000  R    55   loop:   CMP     R1, #CSTART_RBANK + 2   ; if( R1 in bit addressable area )
0008 2D05           56           JMP     CC_EQ, cbclr            ; then continue next (bit) word clear.
                    57           
000A 46F10000  R    58           CMP     R1, #CSTART_RBANK       ; if (R0 in bit addressable area )
000E 2D02           59           JMP     CC_EQ, cbclr            ; then continue next (bit) word clear.
                    60           
0010 84011CFF       61           MOV     [R1], ZEROS             ; clear
0014 B6F100FD       62   cbclr:  CMPD2   R1, # BOTTOM_BITRAM     ; if( not bottom bit addressable area )
0018 3DF5           63           JMP     CC_NE, loop             ; then continue next (bit) word clear
                    64           
                    65   
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:  10
start_master

 LOC CODE        LINE   SOURCELINE

                    66   
                    67                                            ; C166_INIT
                    68   
001A E6F40000  R    69           MOV     R4,  #POF ?C166_INIT_HEAD ; move intra-page offset address rom
                    70                                            ; data section C166_INIT to R4
001E                71   INIT_DPP0:                               ;
001E E6000000  R    72           MOV     DPP0,#PAG ?C166_INIT_HEAD ; load data page pointer register DPP0
                    73                                            ; with data page of rom data C166_INIT
0022 CC00           74           NOP                              ; delay for pipeline effect
                    75   #line 78 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                    78   
                    79                   
0024                80   INIT:                                   ;
0024 9854           81           MOV     R5, [R4+]               ; INIT block header code -> R5
0026 4851           82           CMP     R5, #01H                ; check if header code 1 (bit)
0028 2D5C           83           JMP     CC_EQ, INIT_01          ;
                    84           
                    85   
                    86   
002A 4855           87           CMP     R5, #05H                ; check if header code is 5 (near)
                    88     
002C 2D50           89           JMP     CC_EQ, INIT_05          ;
                    90           
                    91   #line 94 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                    94     
                    95   
                    96   
                    97   
002E 4856           98           CMP     R5, #06H                ; check if header code 6 (far)
0030 2D31           99           JMP     CC_EQ, INIT_06          ;
                   100           
0032 4857          101           CMP     R5, #07H                ; check if header code 7 (huge)
0034 3D59          102           JMP     CC_NE, INIT_END         ; if(no header code) end initialization
                   103           
                   104   
0036               105   INIT_07:                                ; initialize huge ram data. (data > 64K)
0036 9814          106           MOV     SOF_RAM, [R4+]          ; move intra-segment offset address ram
                   107                                           ; data block to SOF_RAM=R1
0038 9834          108           MOV     R3, [R4+]               ; move segment address ram data block 
                   109                                           ; to register R3
                   110                                           ; process data page number ram data
003A F173          111           MOV     RH3, SOF_RAM_H          ; R3.15, R3.14: low bits of page number (byte forwardin
                         g)
                   112           
                   113           
                   114           
003C 1C23          115           ROL     R3, #2                  ; shift R3.15, R3.14 to R3.1 and R3.0
003E 66F3FF03      116           AND     R3, #03FFH              ; mask page number
0042 F6F302FE      117           MOV     DPP1, R3                ; load data page pointer register DPP1
                   118                                           ; with data page of ram data block
0046 FEF1          119           BCLR    SOF_RAM.15              ; DPP1:POF_RAM ->SOF_RAM
0048 EFF1          120           BSET    SOF_RAM.14              ;
                   121                                           ;
004A 9824          122           MOV     SOF_ROM, [R4+]          ; move intra-segment offset address rom
                   123                                           ; data block to SOF_ROM=R2
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:  11
start_master

 LOC CODE        LINE   SOURCELINE

004C 9834          124           MOV     R3, [R4+]               ; move segment address rom data block
                   125                                           ; to R3
                   126                                           ; process data page number rom data
004E F175          127           MOV     RH3, SOF_ROM_H          ; R3.15, R3.14=low bits of page number (byte forwarding
                         )
                   128           
                   129           
                   130   
0050 1C23          131           ROL     R3, #2                  ; shift R3.15, R3.14 to R3.1 and R3.0
0052 66F3FF03      132           AND     R3, #03FFH              ; mask page number
0056 F6F304FE      133           MOV     DPP2, R3                ; load data page pointer register DPP2
                   134                                           ; with data page of rom data block
005A FFF2          135           BSET    SOF_ROM.15              ; DPP2:POF_ROM ->SOF_ROM
005C EEF2          136           BCLR    SOF_ROM.14              ;
                   137                                           ;
005E 9854          138           MOV     R5, [R4+]               ; number of bytes (R6:R5) to move from
0060 9864          139           MOV     R6, [R4+]               ; rom to ram. MSW=R6, LSW=R5 (long word)
                   140                                           ;
0062               141   MB07_3: ; Service Watchdog Timer (if enabled)
0062 A005          142           CMPD1   R5, #0                  ; test if all bytes are moved and
0064 3D02          143           JMP     CC_NE, MB07_1           ; decrement number of bytes to move.
                   144           
0066 A006          145           CMPD1   R6, #0                  ;
                   146     
0068 2D10          147           JMP     CC_EQ, MB07_4           ;
                   148           
                   149   #line 152 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                   152     
006A C912          153   MB07_1: MOVB    [SOF_RAM], [SOF_ROM]    ; move byte from rom to ram
006C 86F1FF7F      154           CMPI1   SOF_RAM, #07FFFH        ; test end of data page and inc SOF_RAM
0070 3D04          155           JMP     CC_NE, MB07_2           ; if(no page end) cont init current page
                   156           
0072 E6F10040      157           MOV     SOF_RAM, #04000H        ; preset offset address ram data
0076 06010100      158           ADD     DPP1, #1                ; next page of ram data; increment DPP1
007A 86F2FFBF      159   MB07_2: CMPI1   SOF_ROM, #0BFFFH        ; test end of page and inc SOF_ROM
007E 3DF1          160           JMP     CC_NE, MB07_3           ; if(no page end) cont init current page
                   161           
0080 E6F20080      162           MOV     SOF_ROM, #08000H        ; preset offset address rom data
0084 06020100      163           ADD     DPP2, #1                ; next page of rom data; increment DPP2
0088 0DEC          164           JMP     CC_UC, MB07_3           ; jump for next byte move
                   165     
008A E6010000  R   166   MB07_4: MOV     DPP1, #PAG ?BASE_DPP1   ; restore data page register DPP1 and
008E E6020000  R   167           MOV     DPP2, #PAG ?BASE_DPP2   ; DPP2 to their default values.
0092 0DC8          168           JMP     CC_UC, INIT             ; next initialization
                   169     
                   170   
0094               171   INIT_06:                                ; initialize far ram data. (CPU mode 
                   172                                           ; is segmented with DPP usage linear
                   173                                           ; or paged.)
0094 9814          174           MOV     POF_RAM, [R4+]          ; move intra-page offset address ram
                   175                                           ; data block to POF_RAM=R1
0096 FEF1          176           BCLR    SOF_RAM.15              ; DPP1:POF_RAM ->SOF_RAM
0098 EFF1          177           BSET    SOF_RAM.14              ;
009A 940402FE      178           MOV     DPP1, [R4]              ; load data page pointer register DPP1
                   179                                           ; with data page of ram data block
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:  12
start_master

 LOC CODE        LINE   SOURCELINE

009E 0842          180           ADD     R4, #2                  ; inc offset address to ram data section
                   181                                           ; C166_INIT and also insure a delay for
                   182                                           ; pipeline effect.(DPP1 set)
                   183                                           ;
00A0 9824          184           MOV     POF_ROM, [R4+]          ; move intra-page offset address rom
                   185                                           ; data block to POF_ROM=R2
00A2 FFF2          186           BSET    SOF_ROM.15              ; DPP2:POF_ROM ->SOF_ROM
00A4 EEF2          187           BCLR    SOF_ROM.14              ;
00A6 940404FE      188           MOV     DPP2, [R4]              ; load data page pointer register DPP2
                   189                                           ; with data page of rom data block
00AA 0842          190           ADD     R4, #2                  ; inc offset address to rom data section
                   191                                           ; C166_INIT and also insure a delay for
                   192                                           ; pipeline effect.(DPP2 set)
                   193                                           ;
00AC 9854          194           MOV     R5, [R4+]               ; number of bytes to move from rom to
                   195                                           ; ram for specified data block.
                   196                                           ;
00AE               197   MB06_1: ; Service Watchdog Timer (if enabled)
00AE A005          198           CMPD1   R5, #0                  ; test on data block end
                   199     
00B0 2D09          200           JMP     CC_EQ, MB06_2           ;
                   201           
00B2 E912          202           MOVB    [SOF_RAM], [SOF_ROM+]   ; move byte from rom to ram, inc SOF_ROM
00B4 86F1FF7F      203           CMPI1   SOF_RAM, #07FFFH        ; test end of data page and inc SOF_RAM
00B8 3DFA          204           JMP     CC_NE, MB06_1           ; if(no page end) cont init current page
                   205           
00BA E6F10040      206           MOV     SOF_RAM, #04000H        ; preset offset address ram data
00BE 06010100      207           ADD     DPP1, #1                ; next page of ram data; increment DPP1
00C2 0DF5          208           JMP     cc_UC, MB06_1           ; jump for next byte move
00C4 E6010000  R   209   MB06_2: MOV     DPP1, #PAG ?BASE_DPP1   ; restore data page register DPP1 and
00C8 E6020000  R   210           MOV     DPP2, #PAG ?BASE_DPP2   ; DPP2 to their default values.
00CC 0DAB          211           JMP     CC_UC, INIT             ; next initialization
                   212   #line 218 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                   218     
                   219   
                   220   
                   221   
00CE               222   INIT_05:                                ; initialize near ram data. (DPP usage
                   223                                           ; is linear, CPU mode is segmented
                   224                                           ; for SMALL memory model and not
                   225                                           ; segmented for TINY memory model.)
00CE 9814          226           MOV     SOF_RAM, [R4+]          ; move intra-segment offset address ram
                   227                                           ; data block to SOF_RAM=R1
                   228                                           ;
00D0 9824          229           MOV     SOF_ROM, [R4+]          ; move intra-segment offset address rom
                   230                                           ; data block to SOF_ROM=R2
                   231                                           ;
00D2 9854          232           MOV     R5, [R4+]               ; number of bytes to move from rom to
                   233                                           ; ram for specified data block.
                   234     
00D4 E6000000  R   235           MOV     DPP0, #PAG ?BASE_DPP0   ; restore DPP0 to its default value
                   236     
00D8               237   MB05_1: ; Service Watchdog Timer (if enabled)
00D8 A005          238           CMPD1   R5, #0                  ; test on data block end, and delay
                   239                                           ; for pipeline effect if DPP0 is
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:  13
start_master

 LOC CODE        LINE   SOURCELINE

                   240                                           ; restored for SMALL memory model.
                   241   #line 244 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                   244     
00DA 2DA1          245           JMP     CC_EQ, INIT_DPP0        ; if( block end ) reload data page
                   246           ; pointer register DPP0 with data page
                   247                                           ; of rom data C166_INIT and start next
                   248                                           ; initialization.
                   249     
00DC E912          250           MOVB    [SOF_RAM], [SOF_ROM+]   ; byte move rom to ram, inc SOF_ROM
00DE 0811          251           ADD     SOF_RAM, #1             ; inc SOF_RAM
00E0 0DFB          252           JMP     CC_UC, MB05_1           ; jump for next byte move
                   253   
                   254   
                   255   #line 364 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                   364   ; NO BIT INITIALIZATION
                   365                                           ;
00E2               366   INIT_01:
00E2 06F40C00      367           ADD     R4,#0CH                 ; skip DBPTR, DPTR and DW
00E6 0D9E          368           JMP     CC_UC, INIT             ; continue with next initialization
                   369   
                   370   
00E8               371   INIT_END:                               ;
                   372   
                   373                                           ; C166_BSS
                   374   
00E8 E6F40000  R   375           MOV     R4, #POF ?C166_BSS_HEAD ; move intra-page offset address rom
                   376                                           ; data section C166_BSS to R4
00EC               377   BSS_DPP0:                               ;
00EC E6000000  R   378           MOV     DPP0,#PAG ?C166_BSS_HEAD ; load data page pointer register DPP0
                   379                                           ; with data page of rom data C166_BSS
00F0 CC00          380           NOP                             ; delay for pipeline effect
                   381   #line 384 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                   384   
00F2               385   BSS:                                    ;
00F2 9854          386           MOV     R5, [R4+]               ; BSS block header code -> R5
                   387   
00F4 4855          388           CMP     R5, #05H                ; check if header code 5 (near)
                   389     
00F6 2D31          390           JMP     CC_EQ, BSS_05           ;
                   391           
                   392   #line 395 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                   395     
                   396   
                   397   
00F8 4856          398           CMP     R5, #06H                ; check if header code 6 (far)
00FA 2D1F          399           JMP     CC_EQ, BSS_06           ;
                   400           
00FC 4857          401           CMP     R5, #07H                ; check if header code 7 (huge)
00FE 3D37          402           JMP     CC_NE, BSS_END          ; if(no header code) end initialization
                   403           
                   404   
0100               405   BSS_07:                                 ; clear huge ram data (data > 64 K)
0100 9814          406           MOV     SOF_RAM, [R4+]          ; move intra-segment offset address ram
                   407                                           ; data block to SOF_RAM=R1
0102 9834          408           MOV     R3, [R4+]               ; move segment address ram data block
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:  14
start_master

 LOC CODE        LINE   SOURCELINE

                   409                                           ; to R3
                   410                                           ; process data page number ram data 
0104 F173          411           MOV     RH3, SOF_RAM_H          ; R3.15, R3.14=low bits of page number *byte forwarding
                         )
                   412           
                   413           
                   414   
0106 1C23          415           ROL     R3, #2                  ; shift R3.15, R3.14 to R3.1 and R3.0
0108 66F3FF03      416           AND     R3, #03FFH              ; mask page number
010C F6F302FE      417           MOV     DPP1, R3                ; load data page pointer register DPP1
                   418                                           ; with data page of ram data block
0110 FEF1          419           BCLR    SOF_RAM.15              ; DPP1:POF_RAM ->SOF_RAM
0112 EFF1          420           BSET    SOF_RAM.14              ;
                   421                                           ;
0114 9854          422           MOV     R5, [R4+]               ; number of bytes (R6:R5) to clear in
0116 9864          423           MOV     R6, [R4+]               ; specified ram data block. 
                   424                                           ; MSW=R6, LSW=R5 (long word)
                   425                                           ;
0118               426   CB07_2: ; Service Watchdog Timer (if enabled)
0118 A005          427           CMPD1   R5, #0                  ; test if all bytes are cleared and
011A 3D02          428           JMP     CC_NE, CB07_1           ; decrement number of bytes to clear.
                   429           ; 
011C A006          430           CMPD1   R6, #0                  ;
                   431     
011E 2D0A          432           JMP     CC_EQ, CB07_3           ;
                   433           ; 
                   434   #line 437 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                   437     
0120 A4011CFF      438   CB07_1: MOVB    [SOF_RAM], ZEROS        ; clear byte
0124 86F1FF7F      439           CMPI1   SOF_RAM, #07FFFH        ; test end of data page and inc SOF_RAM
0128 3DF7          440           JMP     CC_NE, CB07_2           ; if(no page end) next byte clear
                   441           ; 
012A E6F10040      442           MOV     SOF_RAM, #04000H        ; preset offset address ram data
012E 06010100      443           ADD     DPP1, #1                ; next page ram data; increment DPP1
0132 0DF2          444           JMP     CC_UC, CB07_2           ; jump for next byte clear
                   445     
0134 E6010000  R   446   CB07_3: MOV     DPP1, #PAG ?BASE_DPP1   ; restore data page register DPP1.
0138 0DDC          447           JMP     CC_UC, BSS              ; next initialization
                   448     
                   449   
013A               450   BSS_06:                                 ; clear far ram data. (CPU mode is
                   451                                           ; segmented with DPP usage linear or
                   452                                           ; paged.)
013A 9814          453           MOV     POF_RAM, [R4+]          ; move intra-page offset address ram
                   454                                           ; data block to POF_RAM=R1
013C FEF1          455           BCLR    SOF_RAM.15              ; DPP1:POF_RAM ->SOF_RAM
013E EFF1          456           BSET    SOF_RAM.14              ;
0140 940402FE      457           MOV     DPP1, [R4]              ; load data page pointer register DPP1
                   458                                           ; with data page of ram data block
0144 0842          459           ADD     R4, #2                  ; inc offset address to ram data section
                   460                                           ; C166_BSS and also insure a delay for 
                   461                                           ; pipeline effect. (DPP1 set)
                   462                                           ;
0146 9854          463           MOV     R5, [R4+]               ; number of bytes to clear in specified
                   464                                           ; ram data block
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:  15
start_master

 LOC CODE        LINE   SOURCELINE

                   465                                           ;
0148               466   CB06_1: ; Service Watchdog Timer (if enabled)
0148 A005          467           CMPD1   R5, #0                  ; test on data block end
                   468     
014A 2D04          469           JMP     CC_EQ, CB06_2           ;
                   470           ; 
                   471   #line 474 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                   474     
014C A4011CFF      475           MOVB    [SOF_RAM], ZEROS        ; clear byte
0150 0811          476           ADD     SOF_RAM, #1             ; inc SOF_RAM
0152 0DFA          477           JMP     CC_UC, CB06_1           ; jump for next byte clear
                   478     
0154 E6010000  R   479   CB06_2: MOV     DPP1, #PAG ?BASE_DPP1   ; restore data page register DPP1
0158 0DCC          480           JMP     CC_UC, BSS              ; next initialization
                   481     
                   482   
                   483   
                   484   
015A               485   BSS_05:                                 ; clear near ram data. (DPP usage
                   486                                           ; is linear, CPU mode is segmented
                   487                                           ; for SMALL memory model and not
                   488                                           ; segmented for TINY memory model.)
015A 9814          489           MOV     SOF_RAM, [R4+]          ; move intra-segment offset address ram
                   490                                           ; data block to SOF_RAM=R1
                   491                                           ;
015C 9854          492           MOV     R5, [R4+]               ; number of bytes to clear in specified
                   493                                           ; ram data block
                   494     
015E E6000000  R   495           MOV     DPP0, #PAG ?BASE_DPP0   ; restore DPP0 to its default value
                   496     
0162               497   CB05_1: ; Service Watchdog Timer (if enabled)
0162 A005          498           CMPD1   R5, #0                  ; test on data block end, and delay for
                   499                                           ; pipeline effect if DPP0 is restored
                   500                                           ; for SMALL memory model
                   501   #line 504 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                   504     
0164 2DC3          505           JMP     CC_EQ, BSS_DPP0         ; if( block end ) reload data page
                   506           ; pointer register DPP0 with data page
                   507                                           ; of rom data C166_BSS and start next
                   508                                           ; initialization
                   509     
0166 A4011CFF      510           MOVB    [SOF_RAM], ZEROS        ; clear byte
016A 0811          511           ADD     SOF_RAM, #1             ; inc SOF_RAM
016C 0DFA          512           JMP     CC_UC, CB05_1           ; jump for next byte clear
                   513           
                   514   
016E               515   BSS_END:
                   516   
                   517     
016E E6000000  R   518           MOV     DPP0, #PAG ?BASE_DPP0   ; restore DPP0 to its default value
                   519   #line 521 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
                   521     
                   522     
                   523   
                   524   #line 532 "c:\program files (x86)\tasking\c166 v8.7r1\include\_c_init.asm"
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:  16
start_master

 LOC CODE        LINE   SOURCELINE

                   532           
0172 DB00          533                   ret                             ; return address on the system stack    
                   534   __C_INIT        ENDP
                   535   __C_INIT_PR     ENDS                            
                   536   #line 25 "start_master.asm"
                    25   
                    26           NAME    CSTART                  ; module name
                    27   
                    28           PUBLIC  __IDLE                  ; cstart end
                    29           PUBLIC  __EXIT                  ; address to jump to on 'exit()'
                    30           EXTERN  _main:FAR               ; start label user program
                    31           EXTERN __C_INIT:FAR
                    32   
                    33   __CSTART_PR     SECTION CODE WORD PUBLIC 'CPROGRAM'
                    34   __CSTART        PROC TASK __CSTART_TASK INTNO __CSTART_INUM = 0
                    35   
0000 A55AA5A5       36           DISWDT                                          ;  Disable watchdog timer
                    37   
0004 E6F00940       38           MOV     R0,#0x4009
0008 F6F01EEE       39           MOV     ADDRSEL1, R0
000C E000           40           MOV     R0,#0x0000
000E F6F026EE       41           MOV     ADDRSEL2, R0
0012 F2F000EE       42           MOV     R0,EBCMOD0
0016 66F00000       43           AND     R0, #(~0xFFFF)|0
001A 76F04571       44           OR      R0, #((0x7145&~0)&0xFFFF)
001E F6F000EE       45           MOV     EBCMOD0, R0
0022 E6F01000       46           MOV     R0,#0x0010
0026 F6F002EE       47           MOV     EBCMOD1, R0
002A E6F04000       48           MOV     R0,#0x0040
002E F6F010EE       49           MOV     TCONCS0, R0
0032 F2F012EE       50           MOV     R0,FCONCS0
0036 66F0C8FF       51           AND     R0, #(~0x0037)|0
003A 76F02100       52           OR      R0, #((0x0021&~0)&0x0037)
003E F6F012EE       53           MOV     FCONCS0, R0
0042 E6F04000       54           MOV     R0,#0x0040
0046 F6F018EE       55           MOV     TCONCS1, R0
004A E6F02100       56           MOV     R0,#0x0021
004E F6F01AEE       57           MOV     FCONCS1, R0
0052 E6F03D7C       58           MOV     R0,#0x7c3d
0056 F6F020EE       59           MOV     TCONCS2, R0
005A E6F02100       60           MOV     R0,#0x0021
005E F6F022EE       61           MOV     FCONCS2, R0
0062 D180           62           EXTR    #1
0064 E67D0080 1     63           MOV     CMCTR, #0x8000
                    64   
0068 E689C000       65           MOV     VECSEG, #(0xC00000>>16)                 ; Set vector table segment
                    66   
006C D120           67           ATOMIC  #3
006E E6090000 3R    68           MOV     SP,     #SOF ?SYSSTACK_TOP              ; Set stack pointer.
0072 E60A0000 2R    69           MOV     STKOV,  #SOF ?SYSSTACK_BOTTOM + 6*2     ; Set stack overflow pointer.
0076 E60B0000 1R    70           MOV     STKUN,  #SOF ?SYSSTACK_TOP              ; Set stack underflow pointer.
                    71   
007A E6080000  R    72           MOV     CP,     #CSTART_RBANK   ; Set context pointer.
007E CC00           73           NOP
                    74   
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:  17
start_master

 LOC CODE        LINE   SOURCELINE

0080 E6000000  R    75           MOV     DPP0, #PAG ?BASE_DPP0   ; Set data page pointer.
0084 E6010000  R    76           MOV     DPP1, #PAG ?BASE_DPP1   ; Initialise these before we can make a
0088 E6020000  R    77           MOV     DPP2, #PAG ?BASE_DPP2   ; user stack call below
                    78           ; Set user stack pointer
                    79           ; To avoid problems when the userstack is located at the end of a page, the
                    80           ; initial value is set using base + size.
008C E6F00000  R    81           MOV     R0, #?USRSTACK_BOTTOM + (?USRSTACK_TOP - ?USRSTACK_BOTTOM)
                    82   
0090 1A880203       83           BFLDH   PSW, #3, #2             ; set local register bank 0 (10)
                    84   
0094 E6F00000  R    85           MOV     R0, #?USRSTACK0_BOTTOM + (?USRSTACK0_TOP - ?USRSTACK0_BOTTOM)
                    86   
0098 1A880303       87           BFLDH   PSW, #3, #3             ; set local register bank 1 (11)
                    88   
009C E6F00000  R    89           MOV     R0, #?USRSTACK1_BOTTOM + (?USRSTACK1_TOP - ?USRSTACK1_BOTTOM)
                    90   
                    91   
00A0 1A880003       92           BFLDH   PSW, #3, #0             ; set to global user stack
                    93   
00A4 B54AB5B5       94           EINIT                           ; End of initialization
                    95   
00A8 DA000000  R    96           call    __C_INIT                ; return address pushed on system stack (@Rx not used)  
                                         ; initialization of global/static data
                    97   
00AC BF88           98           BSET    IEN                     ; allow monitor to break application
                    99   
00AE E00C          100           MOV     R12, #0                 ; set argc to 0
00B0 E00D          101           MOV     R13, #0                 ; set argv[] to 0
00B2 E00E          102           MOV     R14, #0                 ;
                   103   
00B4 DA000000  R   104           call    _main           ; return address pushed on system stack (@Rx not used)
                   105   
                   106   ; The exit() function causes normal program termination to occur. First, all 
                   107   ; functions registered by the atexit() function are called in the reverse 
                   108   ; order. Next, all open streams with unwritten buffered data are flushed, all 
                   109   ; open streams are closed and all files created by the tmpfile() function are 
                   110   ; removed. The status value passed to exit is returned in R4.
00B8               111   __EXIT: LABEL FAR                       ; the exit() or abort() function jumps
                   112                                           ; to this entry.
00B8 87788787      113   __IDLE: IDLE                            ; Power down CPU until peripheral inter-
                   114                                           ; rupt or external interrupt occurs.
00BC 0DFD          115           JMPR    CC_UC, __IDLE           ; set idle mode again.
                   116           RETV                            ; Virtual return.
                   117   __CSTART        ENDP
                   118   __CSTART_PR     ENDS
                   119   
                   120   C166_US SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
0000               121           DS      2                       ; Allocate a user stack of at least 2 bytes
                   122   C166_US ENDS
                   123   
                   124   ; Define empty user stack used with localregister bank 0.
                   125   C166_US0 SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
                   126   C166_US0 ENDS
                   127   C166_US1 SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
                   128   C166_US1 ENDS
TASKING C166/ST10 assembler v8.7r1 Build 306                                Date: Sep 28 2023  Time: 15:13:49  Page:  18
start_master

 LOC CODE        LINE   SOURCELINE

                   129   C166_US2 SECTION LDAT WORD GLBUSRSTACK 'CUSTACK'
                   130   C166_US2 ENDS
                   131   
                   132   C166_SYSSTACK SECTION HDAT WORD SYSSTACK
0000               133           DS 256 * 2      ; Reserve stack size in words
                   134   C166_SYSSTACK ENDS
                   135           SSKDEF 7                        ; System stack size
                   136   
                   137   CSTART_RBANK REGDEF R0-R15              ; Register usage
                   138   
                   139   
                   140           END

total errors: 0, warnings: 0

